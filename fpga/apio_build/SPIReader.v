/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 0.99.3. DO NOT MODIFY.
*/
module SPIReader
    ( // Inputs
      input  clk // clock
    , input  rst // asynchronous reset: active high
    , input  spi_clk 
    , input  mosi 
    , input [7:0] to_output 

      // Outputs
    , output wire [7:0] data 
    , output wire  received 
    , output wire  miso 
    , output wire  transmission_started 
    , output wire  debug 
    );
  reg [26:0] result;
  wire [9:0] \input ;
  wire [10:0] ds1;
  wire  clk1;
  wire  mosi1;
  wire [7:0] toOutput1;
  wire [7:0] ds5;
  wire [7:0] ds6;
  wire [10:0] \#nextStepOut ;
  reg [26:0] state;
  wire [26:0] \#updateStateDataOut ;
  reg [26:0] \#updateStateDataOut_app_arg ;
  wire [7:0] \#updateStateDataOut_app_arg_0 ;
  wire [7:0] ds2;
  wire [7:0] ds3;
  wire [9:0] eta1;
  wire [11:0] \#tup_app_arg ;

  assign eta1 = {spi_clk,mosi,to_output};

  Spi_output_r Spi_output_r_tup_app_arg
    ( .\#case_alt  (\#tup_app_arg )
    , .ds (result)
    , .\input  (\input ) );

  always @(*) begin
    case(ds1[10:8])
      3'b000 : result = {\#nextStepOut ,ds5,ds6};
      3'b001 : result = {\#nextStepOut ,ds5,ds6};
      3'b101 : result = {\#nextStepOut ,ds5,ds6};
      default : result = {\#nextStepOut ,ds5,ds6};
    endcase
  end

  assign \input  = {clk1,mosi1,toOutput1};

  assign ds1 = state[26:16];

  assign clk1 = eta1[9:9];

  assign mosi1 = eta1[8:8];

  assign toOutput1 = eta1[7:0];

  assign ds5 = \#updateStateDataOut [15:8];

  assign ds6 = \#updateStateDataOut [7:0];

  Spi_nextStep Spi_nextStep_nextStepOut
    ( .\#case_alt  (\#nextStepOut )
    , .ds (state)
    , .ds1 (\input ) );

  // register begin
  always @(posedge clk or posedge rst) begin : SPIReader_register
    if (rst) begin
      state <= {{3'b000,8'bxxxxxxxx},8'd0,8'd171};
    end else begin
      state <= result;
    end
  end
  // register end

  Spi_updateStateData Spi_updateStateData_updateStateDataOut
    ( .\#case_alt  (\#updateStateDataOut )
    , .state (\#updateStateDataOut_app_arg )
    , .ds (\input ) );

  always @(*) begin
    case(ds1[10:8])
      3'b000 : \#updateStateDataOut_app_arg  = {{3'b000,8'bxxxxxxxx}
                                               ,ds2
                                               ,toOutput1};
      3'b001 : \#updateStateDataOut_app_arg  = {{3'b001,8'bxxxxxxxx}
                                               ,ds2
                                               ,toOutput1};
      3'b101 : \#updateStateDataOut_app_arg  = {ds1
                                               ,ds2
                                               ,\#updateStateDataOut_app_arg_0 };
      default : \#updateStateDataOut_app_arg  = state;
    endcase
  end

  // rotateL begin
  wire [2*8-1:0] u;
  assign u = {ds3,ds3} << (64'sd1);
  assign \#updateStateDataOut_app_arg_0  = u[8-1 : 0];
  // rotateL end

  assign ds2 = state[15:8];

  assign ds3 = state[7:0];

  assign data = \#tup_app_arg [11:4];

  assign received = \#tup_app_arg [3:3];

  assign miso = \#tup_app_arg [2:2];

  assign transmission_started = \#tup_app_arg [1:1];

  assign debug = \#tup_app_arg [0:0];
endmodule

